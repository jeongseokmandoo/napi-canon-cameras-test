(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["napi-canon-cameras-stubs"] = {}));
})(this, (function (exports) { 'use strict';

    var Aperture = (function () {
        function Aperture(value_) {
            this.value_ = value_;
            this[_a] = 'Aperture';
            var name = Object.keys(Aperture.ID).find(function (key) { return Aperture.ID[key] === value_; });
            var formatAperture = function (aperture) { return ('f' +
                aperture.toFixed(1).replace(/\.0$/, '')); };
            if (name) {
                this.label_ = name;
                this.aperture_ = 0;
            }
            else if ("".concat(value_) in Aperture.OneThirdValues) {
                this.aperture_ = Aperture.OneThirdValues[value_] || 0;
                this.label_ = formatAperture(this.aperture_) + ' (1/3)';
            }
            else {
                this.aperture_ = Aperture.OneHalfValues[value_] || 0;
                this.label_ = formatAperture(this.aperture_);
            }
        }
        Object.defineProperty(Aperture.prototype, "label", {
            get: function () {
                return this.label_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Aperture.prototype, "value", {
            get: function () {
                return this.value_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Aperture.prototype, "aperture", {
            get: function () {
                return this.aperture_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Aperture.prototype, "stop", {
            get: function () {
                return ("".concat(this.value_) in Aperture.OneThirdValues) ? '1/3' : '1/2';
            },
            enumerable: false,
            configurable: true
        });
        Aperture.prototype[(_a = Symbol.toStringTag, Symbol.toPrimitive)] = function (hint) {
            switch (hint) {
                case 'number':
                    return this.value_;
                case 'string':
                    return this.label_;
                default:
                    return null;
            }
        };
        Aperture.prototype.toJSON = function () {
            return {
                label: this.label,
                value: this.value,
                aperture: this.aperture,
                stop: this.stop,
            };
        };
        Aperture.findNearest = function (valueOrLabel, filter) {
            var aperture;
            if (typeof valueOrLabel === 'string') {
                var a = Aperture.forLabel(valueOrLabel);
                if (!a) {
                    return null;
                }
                aperture = a.aperture;
            }
            else {
                aperture = (new Aperture(valueOrLabel)).aperture;
            }
            var found = Object.keys(Aperture.AllValues).reduce(function (carry, key) {
                var current = Aperture.AllValues[key];
                var difference = Math.abs(current - aperture);
                if (!carry || difference < carry.difference) {
                    if (filter && !filter(new Aperture(+key))) {
                        return carry;
                    }
                    return {
                        value: +key,
                        difference: difference,
                    };
                }
                return carry;
            }, null);
            if (found) {
                return new Aperture(found.value);
            }
            return null;
        };
        Aperture.forLabel = function (label) {
            if (label in Aperture.ID) {
                return new Aperture(Aperture.ID[label]);
            }
            var match = label.match(/f?(\d+(?:\.\d+)?)\s*(.*)/);
            if (match) {
                var aperture_1 = parseFloat(match[1]) || 0.0;
                var isOneThird = match[2].indexOf('1/3') >= 0;
                var values_1 = isOneThird ? Aperture.OneThirdValues : Aperture.OneHalfValues;
                var value = Object
                    .keys(values_1)
                    .find(function (straw) { return Math.abs(values_1[straw] - aperture_1) < 0.00001; });
                return new Aperture(+(value || -1));
            }
            return null;
        };
        var _a;
        Aperture.ID = {
            'Auto': 0,
            'NotValid': 4294967295,
        };
        Aperture.OneHalfValues = {
            '8': 1,
            '11': 1.1,
            '12': 1.2,
            '16': 1.4,
            '19': 1.6,
            '20': 1.8,
            '24': 2,
            '27': 2.2,
            '28': 2.5,
            '32': 2.8,
            '35': 3.2,
            '36': 3.5,
            '40': 4,
            '43': 4.5,
            '44': 4.5,
            '45': 5,
            '48': 5.6,
            '51': 6.3,
            '52': 6.7,
            '53': 7.1,
            '56': 8,
            '59': 9,
            '60': 9.5,
            '61': 10,
            '64': 11,
            '68': 13,
            '69': 14,
            '72': 16,
            '75': 18,
            '76': 19,
            '77': 20,
            '80': 22,
            '83': 25,
            '84': 27,
            '85': 29,
            '88': 32,
            '91': 36,
            '92': 38,
            '93': 40,
            '96': 45,
            '99': 51,
            '100': 54,
            '101': 57,
            '104': 64,
            '107': 72,
            '108': 76,
            '109': 80,
            '112': 91,
            '133': 3.4,
        };
        Aperture.OneThirdValues = {
            '13': 1.2,
            '21': 1.8,
            '29': 2.5,
            '37': 3.5,
            '67': 13,
        };
        Aperture.AllValues = {
            '8': 1,
            '11': 1.1,
            '12': 1.2,
            '13': 1.2,
            '16': 1.4,
            '19': 1.6,
            '20': 1.8,
            '21': 1.8,
            '24': 2,
            '27': 2.2,
            '28': 2.5,
            '29': 2.5,
            '32': 2.8,
            '35': 3.2,
            '36': 3.5,
            '37': 3.5,
            '40': 4,
            '43': 4.5,
            '44': 4.5,
            '45': 5,
            '48': 5.6,
            '51': 6.3,
            '52': 6.7,
            '53': 7.1,
            '56': 8,
            '59': 9,
            '60': 9.5,
            '61': 10,
            '64': 11,
            '67': 13,
            '68': 13,
            '69': 14,
            '72': 16,
            '75': 18,
            '76': 19,
            '77': 20,
            '80': 22,
            '83': 25,
            '84': 27,
            '85': 29,
            '88': 32,
            '91': 36,
            '92': 38,
            '93': 40,
            '96': 45,
            '99': 51,
            '100': 54,
            '101': 57,
            '104': 64,
            '107': 72,
            '108': 76,
            '109': 80,
            '112': 91,
            '133': 3.4,
        };
        return Aperture;
    }());

    var _a$2;
    var ApiIdentifier = (function () {
        function ApiIdentifier(identifier_, labels) {
            this.identifier_ = identifier_;
            this.labels = labels;
            this[_a$2] = 'ApiIdentifier';
            this.label_ = (Object.keys(labels).find(function (key) { return labels[key] === identifier_; }) ||
                "0x".concat(this.identifier_.toString(16).padStart(8, '0')));
        }
        Object.defineProperty(ApiIdentifier.prototype, "label", {
            get: function () {
                return this.label_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ApiIdentifier.prototype, "identifier", {
            get: function () {
                return this.identifier_;
            },
            enumerable: false,
            configurable: true
        });
        ApiIdentifier.prototype[(_a$2 = Symbol.toStringTag, Symbol.toPrimitive)] = function (hint) {
            switch (hint) {
                case 'number':
                    return this.identifier_;
                case 'string':
                    return "0x".concat(this.identifier_.toString(16).padStart(8, '0'));
                default:
                    return null;
            }
        };
        ApiIdentifier.prototype.equalTo = function (other) {
            return this.identifier_ === +other;
        };
        ApiIdentifier.prototype.toJSON = function () {
            return {
                identifier: this.identifier_,
                label: this.label_,
            };
        };
        return ApiIdentifier;
    }());

    var __extends$2 = (window && window.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var ApiError = (function (_super) {
        __extends$2(ApiError, _super);
        function ApiError(identifier) {
            var _this = _super.call(this, identifier, ApiError.Code) || this;
            _this[_a] = 'ApiError';
            return _this;
        }
        ApiError.prototype.equalTo = function (other) {
            return _super.prototype.equalTo.call(this, +other);
        };
        var _a;
        _a = Symbol.toStringTag;
        ApiError.Code = {
            'CANNOT_MAKE_OBJECT': 41220,
            'CAPTURE_ALREADY_TERMINATED': 8216,
            'COMM_BUFFER_FULL': 195,
            'COMM_DEVICE_INCOMPATIBLE': 194,
            'COMM_DISCONNECTED': 193,
            'COMM_PORT_IS_IN_USE': 192,
            'COMM_USB_BUS_ERR': 196,
            'DEVICE_BUSY': 129,
            'DEVICE_CF_GATE_CHANGED': 137,
            'DEVICE_DIAL_CHANGED': 138,
            'DEVICE_DISK_ERROR': 136,
            'DEVICE_EMERGENCY': 131,
            'DEVICE_INTERNAL_ERROR': 133,
            'DEVICE_INVALID': 130,
            'DEVICE_INVALID_PARAMETER': 134,
            'DEVICE_MEMORY_FULL': 132,
            'DEVICE_NO_DISK': 135,
            'DEVICE_NOT_FOUND': 128,
            'DEVICE_NOT_INSTALLED': 139,
            'DEVICE_NOT_LAUNCHED': 228,
            'DEVICE_NOT_RELEASED': 141,
            'DEVICE_STAY_AWAKE': 140,
            'DEVICEPROP_NOT_SUPPORTED': 8202,
            'DIR_ENTRY_EXISTS': 67,
            'DIR_ENTRY_NOT_FOUND': 66,
            'DIR_IO_ERROR': 65,
            'DIR_NOT_EMPTY': 68,
            'DIR_NOT_FOUND': 64,
            'ENUM_NA': 240,
            'FILE_ALREADY_EXISTS': 43,
            'FILE_CLOSE_ERROR': 36,
            'FILE_DATA_CORRUPT': 45,
            'FILE_DISK_FULL_ERROR': 42,
            'FILE_FORMAT_UNRECOGNIZED': 44,
            'FILE_IO_ERROR': 32,
            'FILE_NAMING_NA': 46,
            'FILE_NOT_FOUND': 34,
            'FILE_OPEN_ERROR': 35,
            'FILE_PERMISSION_ERROR': 41,
            'FILE_READ_ERROR': 39,
            'FILE_SEEK_ERROR': 37,
            'FILE_TELL_ERROR': 38,
            'FILE_TOO_MANY_OPEN': 33,
            'FILE_WRITE_ERROR': 40,
            'HANDLE_NOT_FOUND': 242,
            'INCOMPATIBLE_VERSION': 6,
            'INCOMPLETE_TRANSFER': 8199,
            'INTERNAL_ERROR': 2,
            'INVALID_CODE_FORMAT': 8214,
            'INVALID_DEVICEPROP_FORMAT': 8219,
            'INVALID_DEVICEPROP_VALUE': 8220,
            'INVALID_FN_CALL': 241,
            'INVALID_FN_POINTER': 101,
            'INVALID_HANDLE': 97,
            'INVALID_ID': 243,
            'INVALID_INDEX': 99,
            'INVALID_LENGTH': 100,
            'INVALID_OBJECTFORMATCODE': 8203,
            'INVALID_PARAMETER': 96,
            'INVALID_PARENTOBJECT': 8218,
            'INVALID_POINTER': 98,
            'INVALID_SORT_FN': 102,
            'INVALID_STRAGEID': 8200,
            'INVALID_TRANSACTIONID': 8196,
            'LENS_COVER_CLOSE': 40966,
            'LOW_BATTERY': 41217,
            'MEM_ALLOC_FAILED': 3,
            'MEM_FREE_FAILED': 4,
            'MEMORYSTATUS_NOTREADY': 41222,
            'MISSING_SUBCOMPONENT': 10,
            'NO_VALID_OBJECTINFO': 8213,
            'NOT_CAMERA_SUPPORT_SDK_VERSION': 8225,
            'NOT_SUPPORTED': 7,
            'OBJECT_NOTREADY': 41218,
            'OPERATION_CANCELLED': 5,
            'OPERATION_REFUSED': 40965,
            'PARTIAL_DELETION': 8210,
            'PROPERTIES_MISMATCH': 81,
            'PROPERTIES_NOT_LOADED': 83,
            'PROPERTIES_UNAVAILABLE': 80,
            'PROTECTION_VIOLATION': 9,
            'PTP_DEVICE_BUSY': 8217,
            'SELECTION_UNAVAILABLE': 11,
            'SELF_TEST_FAILED': 8209,
            'SESSION_ALREADY_OPEN': 8222,
            'SESSION_NOT_OPEN': 8195,
            'SPECIFICATION_BY_FORMAT_UNSUPPORTED': 8212,
            'SPECIFICATION_OF_DESTINATION_UNSUPPORTED': 8224,
            'STI_DEVICE_CREATE_ERROR': 226,
            'STI_DEVICE_RELEASE_ERROR': 227,
            'STI_INTERNAL_ERROR': 225,
            'STI_UNKNOWN_ERROR': 224,
            'STREAM_ALREADY_OPEN': 162,
            'STREAM_BAD_OPTIONS': 171,
            'STREAM_CLOSE_ERROR': 164,
            'STREAM_COULDNT_BEGIN_THREAD': 170,
            'STREAM_END_OF_STREAM': 172,
            'STREAM_IO_ERROR': 160,
            'STREAM_NOT_OPEN': 161,
            'STREAM_OPEN_ERROR': 163,
            'STREAM_PERMISSION_ERROR': 169,
            'STREAM_READ_ERROR': 167,
            'STREAM_SEEK_ERROR': 165,
            'STREAM_TELL_ERROR': 166,
            'STREAM_WRITE_ERROR': 168,
            'TAKE_PICTURE_AF_NG': 36097,
            'TAKE_PICTURE_CARD_NG': 36103,
            'TAKE_PICTURE_CARD_PROTECT_NG': 36104,
            'TAKE_PICTURE_LV_REL_PROHIBIT_MODE_NG': 36109,
            'TAKE_PICTURE_MIRROR_UP_NG': 36099,
            'TAKE_PICTURE_MOVIE_CROP_NG': 36105,
            'TAKE_PICTURE_NO_CARD_NG': 36102,
            'TAKE_PICTURE_NO_LENS_NG': 36107,
            'TAKE_PICTURE_RESERVED': 36098,
            'TAKE_PICTURE_SENSOR_CLEANING_NG': 36100,
            'TAKE_PICTURE_SILENCE_NG': 36101,
            'TAKE_PICTURE_SPECIAL_MOVIE_MODE_NG': 36108,
            'TAKE_PICTURE_STROBO_CHARGE_NG': 36106,
            'TRANSACTION_CANCELLED': 8223,
            'UNEXPECTED_EXCEPTION': 8,
            'UNIMPLEMENTED': 1,
            'UNKNOWN_COMMAND': 40961,
            'UNKNOWN_VENDOR_CODE': 8215,
            'USB_DEVICE_LOCK_ERROR': 208,
            'USB_DEVICE_UNLOCK_ERROR': 209,
            'WAIT_TIMEOUT_ERROR': 244,
        };
        return ApiError;
    }(ApiIdentifier));

    var Camera = (function () {
        function Camera(indexOrPort) {
            this[_a] = 'Camera';
            throw new Error('Not implemented - stub only.');
        }
        Camera.prototype.setEventHandler = function (listener) {
            throw new Error('Not implemented - stub only.');
        };
        Object.defineProperty(Camera.prototype, "description", {
            get: function () {
                throw new Error('Not implemented - stub only.');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "portName", {
            get: function () {
                throw new Error('Not implemented - stub only.');
            },
            enumerable: false,
            configurable: true
        });
        Camera.prototype.connect = function (shouldKeepAlive) {
            throw new Error('Not implemented - stub only.');
        };
        Camera.prototype.disconnect = function () {
            throw new Error('Not implemented - stub only.');
        };
        Camera.prototype.getProperty = function (propertyID, specifier) {
            throw new Error('Not implemented - stub only.');
        };
        Camera.prototype.setProperty = function (propertyID, value) {
            throw new Error('Not implemented - stub only.');
        };
        Camera.prototype.setProperties = function (properties) {
            throw new Error('Not implemented - stub only.');
        };
        Camera.prototype.sendCommand = function (command, parameter) {
            throw new Error('Not implemented - stub only.');
        };
        Camera.prototype.takePicture = function () {
            throw new Error('Not implemented - stub only.');
        };
        Camera.prototype.isLiveViewActive = function () {
            throw new Error('Not implemented - stub only.');
        };
        Camera.prototype.startLiveView = function () {
            throw new Error('Not implemented - stub only.');
        };
        Camera.prototype.stopLiveView = function () {
            throw new Error('Not implemented - stub only.');
        };
        Camera.prototype.downloadLiveViewImage = function () {
            throw new Error('Not implemented - stub only.');
        };
        Camera.prototype.getLiveViewImage = function () {
            throw new Error('Not implemented - stub only.');
        };
        Camera.prototype.getVolumes = function () {
            throw new Error('Not implemented - stub only.');
        };
        var _a;
        _a = Symbol.toStringTag;
        Camera.EventName = {
            'CameraConnect': 'CameraConnect',
            'CameraDisconnect': 'CameraDisconnect',
            'DirectoryCreate': 'DirectoryCreate',
            'DownloadRequest': 'DownloadRequest',
            'Error': 'Error',
            'FileCreate': 'FileCreate',
            'KeepAlive': 'KeepAlive',
            'LiveViewStart': 'LiveViewStart',
            'LiveViewStop': 'LiveViewStop',
            'ObjectChange': 'ObjectChange',
            'PropertyChangeOptions': 'PropertyChangeOptions',
            'PropertyChangeValue': 'PropertyChangeValue',
            'StateChange': 'StateChange',
            'VolumeChange': 'VolumeChange',
        };
        Camera.Command = {
            'BulbEnd': 3,
            'BulbStart': 2,
            'DoClickWBEvf': 260,
            'DoEvfAf': 258,
            'DriveLensEvf': 259,
            'DrivePowerZoom': 269,
            'ExtendShutDownTimer': 1,
            'MovieSelectSwOFF': 264,
            'MovieSelectSwON': 263,
            'PressShutterButton': 4,
            'RequestRollPitchLevel': 265,
            'RequestSensorCleaning': 274,
            'SetRemoteShootingMode': 271,
            'TakePicture': 0,
        };
        Camera.PressShutterButton = {
            'Completely': 3,
            'CompletelyNonAF': 65539,
            'Halfway': 1,
            'HalfwayNonAF': 65537,
            'OFF': 0,
        };
        return Camera;
    }());

    var CameraBrowser = (function () {
        function CameraBrowser() {
            this[_a] = 'CameraBrowser';
            throw new Error('Not implemented - stub only.');
        }
        CameraBrowser.prototype.setEventHandler = function (listener) {
            throw new Error('Not implemented - stub only.');
        };
        CameraBrowser.prototype.initialize = function () {
            throw new Error('Not implemented - stub only.');
        };
        CameraBrowser.prototype.terminate = function () {
            throw new Error('Not implemented - stub only.');
        };
        CameraBrowser.prototype.triggerEvents = function () {
            throw new Error('Not implemented - stub only.');
        };
        CameraBrowser.prototype.getCamera = function (at, exactOnly) {
            throw new Error('Not implemented - stub only.');
        };
        CameraBrowser.prototype.getCameras = function () {
            throw new Error('Not implemented - stub only.');
        };
        CameraBrowser.prototype.update = function () {
            throw new Error('Not implemented - stub only.');
        };
        var _a;
        _a = Symbol.toStringTag;
        CameraBrowser.EventName = {
            'CameraAdd': 'CameraAdd',
            'CameraConnect': 'CameraConnect',
            'CameraDisconnect': 'CameraDisconnect',
            'CameraRemove': 'CameraRemove',
            'DirectoryCreate': 'DirectoryCreate',
            'DownloadRequest': 'DownloadRequest',
            'Error': 'Error',
            'FileCreate': 'FileCreate',
            'KeepAlive': 'KeepAlive',
            'LiveViewStart': 'LiveViewStart',
            'LiveViewStop': 'LiveViewStop',
            'ObjectChange': 'ObjectChange',
            'PropertyChangeOptions': 'PropertyChangeOptions',
            'PropertyChangeValue': 'PropertyChangeValue',
            'StateChange': 'StateChange',
            'VolumeChange': 'VolumeChange',
        };
        return CameraBrowser;
    }());

    var _a$1;
    var CameraFile = (function () {
        function CameraFile() {
            this[_a$1] = 'CameraFile';
            throw new Error('Not implemented - stub only.');
        }
        Object.defineProperty(CameraFile.prototype, "name", {
            get: function () {
                throw new Error('Not implemented - stub only.');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CameraFile.prototype, "localFile", {
            get: function () {
                throw new Error('Not implemented - stub only.');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CameraFile.prototype, "groupID", {
            get: function () {
                throw new Error('Not implemented - stub only.');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CameraFile.prototype, "size", {
            get: function () {
                throw new Error('Not implemented - stub only.');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CameraFile.prototype, "format", {
            get: function () {
                throw new Error('Not implemented - stub only.');
            },
            enumerable: false,
            configurable: true
        });
        CameraFile.prototype.downloadToPath = function (path) {
            throw new Error('Not implemented - stub only.');
        };
        CameraFile.prototype.downloadToFile = function (fileName) {
            throw new Error('Not implemented - stub only.');
        };
        CameraFile.prototype.downloadToString = function () {
            throw new Error('Not implemented - stub only.');
        };
        CameraFile.prototype.downloadThumbnailToString = function () {
            throw new Error('Not implemented - stub only.');
        };
        return CameraFile;
    }());
    _a$1 = Symbol.toStringTag;

    var CameraProperty = (function () {
        function CameraProperty(camera, propertyID, propertySpecifier) {
            this[_a] = 'CameraProperty';
            throw new Error('Not implemented - stub only.');
        }
        Object.defineProperty(CameraProperty.prototype, "label", {
            get: function () {
                throw new Error('Not implemented - stub only.');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CameraProperty.prototype, "identifier", {
            get: function () {
                throw new Error('Not implemented - stub only.');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CameraProperty.prototype, "specifier", {
            get: function () {
                throw new Error('Not implemented - stub only.');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CameraProperty.prototype, "available", {
            get: function () {
                throw new Error('Not implemented - stub only.');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CameraProperty.prototype, "value", {
            get: function () {
                throw new Error('Not implemented - stub only.');
            },
            set: function (value) {
                throw new Error('Not implemented - stub only.');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CameraProperty.prototype, "allowedValues", {
            get: function () {
                throw new Error('Not implemented - stub only.');
            },
            enumerable: false,
            configurable: true
        });
        CameraProperty.prototype.toJSON = function () {
            throw new Error('Not implemented - stub only.');
        };
        var _a;
        _a = Symbol.toStringTag;
        CameraProperty.ID = {
            'AEBracket': 1038,
            'AEMode': 1024,
            'AEModeSelect': 1078,
            'AFMode': 1028,
            'Artist': 1048,
            'AutoPowerOffSetting': 16778334,
            'Av': 1029,
            'AvailableShots': 1034,
            'BatteryLevel': 8,
            'BatteryQuality': 16,
            'BodyIDEx': 21,
            'Bracket': 1035,
            'CFn': 9,
            'ColorSpace': 269,
            'ColorTemperature': 263,
            'Copyright': 1049,
            'CurrentFolder': 13,
            'CurrentStorage': 12,
            'DateTime': 6,
            'DC_Strobe': 1537,
            'DC_Zoom': 1536,
            'DepthOfField': 1051,
            'DriveMode': 1025,
            'EFCompensation': 1054,
            'Evf_AFMode': 1294,
            'Evf_ClickWBCoeffs': 16778502,
            'Evf_ColorTemperature': 1283,
            'Evf_CoordinateSystem': 1344,
            'Evf_DepthOfFieldPreview': 1284,
            'Evf_FocusAid': 1289,
            'Evf_Histogram': 1290,
            'Evf_HistogramB': 1304,
            'Evf_HistogramG': 1303,
            'Evf_HistogramR': 1302,
            'Evf_HistogramStatus': 1292,
            'Evf_HistogramY': 1301,
            'Evf_ImageClipRect': 1349,
            'Evf_ImagePosition': 1291,
            'Evf_Mode': 1281,
            'Evf_OutputDevice': 1280,
            'Evf_PowerZoom_CurPosition': 1360,
            'Evf_PowerZoom_MaxPosition': 1361,
            'Evf_PowerZoom_MinPosition': 1362,
            'EVF_RollingPitching': 16778564,
            'Evf_WhiteBalance': 1282,
            'Evf_Zoom': 1287,
            'Evf_ZoomPosition': 1288,
            'Evf_ZoomRect': 1345,
            'ExposureCompensation': 1031,
            'FEBracket': 1039,
            'FirmwareVersion': 7,
            'FixedMovie': 16778274,
            'FlashCompensation': 1032,
            'FlashMode': 1044,
            'FlashOn': 1042,
            'FocalLength': 1033,
            'FocusInfo': 260,
            'GPSAltitude': 2054,
            'GPSAltitudeRef': 2053,
            'GPSDateStamp': 2077,
            'GPSLatitude': 2050,
            'GPSLatitudeRef': 2049,
            'GPSLongitude': 2052,
            'GPSLongitudeRef': 2051,
            'GPSMapDatum': 2066,
            'GPSSatellites': 2056,
            'GPSStatus': 2057,
            'GPSTimeStamp': 2055,
            'GPSVersionID': 2048,
            'HDDirectoryStructure': 32,
            'ICCProfile': 259,
            'ImageQuality': 256,
            'ISOBracket': 1040,
            'ISOSpeed': 1026,
            'JpegQuality': 257,
            'LensBarrelStatus': 1541,
            'LensName': 1037,
            'LensStatus': 1046,
            'MakerName': 5,
            'ManualWhiteBalanceData': 16777732,
            'MeteringMode': 1027,
            'MirrorLockUpState': 16778273,
            'MirrorUpSetting': 16778296,
            'MovieParam': 16778275,
            'MyMenu': 14,
            'NoiseReduction': 1041,
            'Orientation': 258,
            'OwnerName': 4,
            'PictureStyle': 276,
            'PictureStyleCaption': 512,
            'PictureStyleDescription': 277,
            'PowerZoom_Speed': 1092,
            'ProductName': 2,
            'Record': 1296,
            'RedEye': 1043,
            'SaveTo': 11,
            'SummerTimeSetting': 16777240,
            'TemperatureStatus': 16778261,
            'TimeZone': 16777239,
            'Tv': 1030,
            'UTCTime': 16777238,
            'WhiteBalance': 262,
            'WhiteBalanceBracket': 1036,
            'WhiteBalanceShift': 264,
        };
        return CameraProperty;
    }());

    var _a;
    var Directory = (function () {
        function Directory() {
            this[_a] = 'Directory';
            throw new Error('Not implemented - stub only.');
        }
        Object.defineProperty(Directory.prototype, "name", {
            get: function () {
                throw new Error('Not implemented - stub only.');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Directory.prototype, "length", {
            get: function () {
                throw new Error('Not implemented - stub only.');
            },
            enumerable: false,
            configurable: true
        });
        Directory.prototype.getEntries = function () {
            throw new Error('Not implemented - stub only.');
        };
        Directory.prototype[(_a = Symbol.toStringTag, Symbol.iterator)] = function () {
            throw new Error('Not implemented - stub only.');
        };
        return Directory;
    }());

    var ExposureCompensation = (function () {
        function ExposureCompensation(value_) {
            this.value_ = value_;
            this[_a] = 'ExposureCompensation';
            this.compensation_ = ExposureCompensation.Values[value_] || 0;
            this.label_ = ExposureCompensation.getLabelForCompensation(this.compensation_);
        }
        ExposureCompensation.getLabelForCompensation = function (compensation) {
            var label = '';
            if (compensation === 0) {
                return '0';
            }
            var full = compensation > 0 ? Math.floor(compensation) : Math.ceil(compensation);
            var fraction = Math.abs(compensation - full);
            label = full > 0 ? '+' + String(full) : String(full);
            if (fraction > 0.6) {
                label += ' 2/3';
            }
            else if (fraction > 0.49) {
                label += ' 1/2';
            }
            else if (fraction > 0.3) {
                label += ' 1/3';
            }
            return label;
        };
        Object.defineProperty(ExposureCompensation.prototype, "label", {
            get: function () {
                return this.label_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ExposureCompensation.prototype, "value", {
            get: function () {
                return this.value_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ExposureCompensation.prototype, "compensation", {
            get: function () {
                return this.compensation_;
            },
            enumerable: false,
            configurable: true
        });
        ExposureCompensation.prototype[(_a = Symbol.toStringTag, Symbol.toPrimitive)] = function (hint) {
            switch (hint) {
                case 'number':
                    return this.value_;
                case 'string':
                    return this.label_;
                default:
                    return null;
            }
        };
        ExposureCompensation.findNearest = function (compensation) {
            var found = Object.keys(ExposureCompensation.Values).reduce(function (carry, key) {
                if (carry.difference < 0.001) {
                    return carry;
                }
                var current = ExposureCompensation.Values[key];
                var difference = Math.abs(current - compensation);
                if (difference < carry.difference) {
                    return {
                        value: +key,
                        difference: difference,
                    };
                }
                return carry;
            }, {
                value: 0,
                difference: 100,
            });
            if (found) {
                return found.value;
            }
            return null;
        };
        ExposureCompensation.forLabel = function (label) {
            var match = label.match(/([+-]\d+)\s+(?:([12])\/([23]))?/);
            if (match) {
                var compensation = parseFloat(match[1]);
                if (match[2] && match[3]) {
                    if (compensation < 0) {
                        compensation -= parseFloat(match[2]) / parseFloat(match[3]);
                    }
                    else {
                        compensation += parseFloat(match[2]) / parseFloat(match[3]);
                    }
                }
                var value = ExposureCompensation.findNearest(compensation);
                if (value) {
                    return new ExposureCompensation(value);
                }
            }
            return null;
        };
        var _a;
        ExposureCompensation.Values = {
            '0': 0,
            '3': 0.3333333333333333,
            '4': 0.5,
            '5': 0.6666666666666666,
            '8': 1,
            '11': 1.3333333333333333,
            '12': 1.5,
            '13': 1.6666666666666665,
            '16': 2,
            '19': 2.3333333333333335,
            '20': 2.5,
            '21': 2.6666666666666665,
            '24': 3,
            '27': 3.3333333333333335,
            '28': 3.5,
            '29': 3.6666666666666665,
            '32': 4,
            '35': 4.333333333333333,
            '36': 4.5,
            '37': 4.666666666666667,
            '40': 5,
            '216': -5,
            '219': -4.666666666666667,
            '220': -4.5,
            '221': -4.333333333333333,
            '224': -4,
            '227': -3.6666666666666665,
            '228': -3.5,
            '229': -3.3333333333333335,
            '232': -3,
            '235': -2.6666666666666665,
            '236': -2.5,
            '237': -2.3333333333333335,
            '240': -2,
            '243': -1.6666666666666665,
            '244': -1.5,
            '245': -1.3333333333333333,
            '248': -1,
            '251': -0.6666666666666666,
            '252': -0.5,
            '253': -0.3333333333333333,
        };
        return ExposureCompensation;
    }());

    var FileFormat = (function () {
        function FileFormat(value_) {
            var _this = this;
            this.value_ = value_;
            this[_a] = 'FileFormat';
            this.label_ = Object
                .keys(FileFormat.ID)
                .find(function (key) { return FileFormat.ID[key] === _this.value_; }) ||
                "0x".concat(value_.toString(16).padStart(8, '0'));
        }
        Object.defineProperty(FileFormat.prototype, "label", {
            get: function () {
                return this.label_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FileFormat.prototype, "value", {
            get: function () {
                return this.value_;
            },
            enumerable: false,
            configurable: true
        });
        FileFormat.prototype[(_a = Symbol.toStringTag, Symbol.toPrimitive)] = function (hint) {
            switch (hint) {
                case 'number':
                    return this.value_;
                case 'string':
                    return this.label;
                default:
                    return null;
            }
        };
        var _a;
        FileFormat.ID = {};
        return FileFormat;
    }());

    var Flag = (function () {
        function Flag(value) {
            this[_a] = 'Flag';
            if (typeof value === 'boolean') {
                this.value_ = value ? Flag.True : Flag.False;
            }
            else if (value === Flag.True) {
                this.value_ = Flag.True;
            }
            else {
                this.value_ = Flag.False;
            }
            if (this.value_ === Flag.True) {
                this.label_ = 'true';
            }
            else {
                this.label_ = 'false';
            }
        }
        Object.defineProperty(Flag.prototype, "label", {
            get: function () {
                return this.label_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Flag.prototype, "value", {
            get: function () {
                return this.value_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Flag.prototype, "flag", {
            get: function () {
                return this.value_ !== 0;
            },
            enumerable: false,
            configurable: true
        });
        Flag.prototype[(_a = Symbol.toStringTag, Symbol.toPrimitive)] = function (hint) {
            switch (hint) {
                case 'number':
                    return this.value_;
                case 'string':
                    return this.label_;
                default:
                    return null;
            }
        };
        Flag.prototype.toJSON = function () {
            return {
                label: this.label,
                value: this.value,
                flag: this.flag
            };
        };
        Flag.forLabel = function (label) {
            if (['true', '1', 'yes', 'on'].indexOf(label.toLowerCase()) >= 0) {
                return new Flag(Flag.True);
            }
            return new Flag(Flag.False);
        };
        var _a;
        Flag.True = 1;
        Flag.False = 0;
        return Flag;
    }());

    var ImageQuality = (function () {
        function ImageQuality(value_) {
            this.value_ = value_;
            this[_a] = 'ImageQuality';
            var name = Object
                .keys(ImageQuality.ID)
                .find(function (key) { return ImageQuality.ID[key] === value_; });
            if (name) {
                this.label_ = name;
            }
            else {
                this.label_ = '0x' + value_.toString(16).padStart(8, '0');
            }
        }
        ImageQuality.extractBits = function (buffer, offset, length) {
            return (((1 << length) - 1) & (buffer >> (offset)));
        };
        Object.defineProperty(ImageQuality.prototype, "label", {
            get: function () {
                return this.label_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ImageQuality.prototype, "value", {
            get: function () {
                return this.value_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ImageQuality.prototype, "main", {
            get: function () {
                return {
                    format: ImageQuality.extractBits(this.value_, 24, 8),
                    size: ImageQuality.extractBits(this.value_, 20, 4),
                    quality: ImageQuality.extractBits(this.value_, 16, 4)
                };
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ImageQuality.prototype, "secondary", {
            get: function () {
                return {
                    format: ImageQuality.extractBits(this.value_, 8, 4),
                    size: ImageQuality.extractBits(this.value_, 4, 4),
                    quality: ImageQuality.extractBits(this.value_, 0, 4)
                };
            },
            enumerable: false,
            configurable: true
        });
        ImageQuality.prototype[(_a = Symbol.toStringTag, Symbol.toPrimitive)] = function (hint) {
            switch (hint) {
                case 'number':
                    return this.value_;
                case 'string':
                    return this.label_;
                default:
                    return null;
            }
        };
        var _a;
        ImageQuality.ID = {
            'CR': 6553359,
            'CRHEIFL': 6488192,
            'CRHEIFLF': 6488195,
            'CRHEIFLN': 6488194,
            'CRHEIFMF': 6488451,
            'CRHEIFMN': 6488450,
            'CRHEIFS1F': 6491779,
            'CRHEIFS1N': 6491778,
            'CRHEIFS2F': 6492035,
            'CRLJ': 6488080,
            'CRLJF': 6488083,
            'CRLJN': 6488082,
            'CRM1J': 6489360,
            'CRM1JF': 6489363,
            'CRM1JN': 6489362,
            'CRM2J': 6489616,
            'CRM2JF': 6489619,
            'CRM2JN': 6489618,
            'CRMJF': 6488339,
            'CRMJN': 6488338,
            'CRS1JF': 6491667,
            'CRS1JN': 6491666,
            'CRS2JF': 6491923,
            'CRS3JF': 6492179,
            'CRSJ': 6488592,
            'CRSJF': 6488595,
            'CRSJN': 6488594,
            'HEIFL': 8453903,
            'HEIFLF': 8650511,
            'HEIFLN': 8584975,
            'HEIFMF': 25427727,
            'HEIFMN': 25362191,
            'HEIFS1F': 243531535,
            'HEIFS1N': 243465999,
            'HEIFS2F': 260308751,
            'LargeJPEG': 1113871,
            'LargeJPEGFine': 1310479,
            'LargeJPEGNormal': 1244943,
            'Middle1JPEG': 84999951,
            'Middle2JPEG': 101777167,
            'MiddleJPEGFine': 18087695,
            'MiddleJPEGNormal': 18022159,
            'MR': 23396111,
            'MRLJ': 23330832,
            'MRLJF': 23330835,
            'MRLJN': 23330834,
            'MRM1J': 23332112,
            'MRM2J': 23332368,
            'MRMJF': 23331091,
            'MRMJN': 23331090,
            'MRS1JF': 23334419,
            'MRS1JN': 23334418,
            'MRS2JF': 23334675,
            'MRS3JF': 23334931,
            'MRSJ': 23331344,
            'MRSJF': 23331347,
            'MRSJN': 23331346,
            'RAW': 6618895,
            'RAWAndLargeJPEG': 6553616,
            'RAWAndLargeJPEGFine': 6553619,
            'RAWAndLargeJPEGNormal': 6553618,
            'RAWAndMiddle1JPEG': 6554896,
            'RAWAndMiddle2JPEG': 6555152,
            'RAWAndMiddleJPEGFine': 6553875,
            'RAWAndMiddleJPEGNormal': 6553874,
            'RAWAndSmall1JPEGFine': 6557203,
            'RAWAndSmall1JPEGNormal': 6557202,
            'RAWAndSmall2JPEGFine': 6557459,
            'RAWAndSmall3JPEGFine': 6557715,
            'RAWAndSmallJPEG': 6554128,
            'RAWAndSmallJPEGFine': 6554131,
            'RAWAndSmallJPEGNormal': 6554130,
            'RHEIFL': 6553728,
            'RHEIFLF': 6553731,
            'RHEIFLN': 6553730,
            'RHEIFMF': 6553987,
            'RHEIFMN': 6553986,
            'RHEIFS1F': 6557315,
            'RHEIFS1N': 6557314,
            'RHEIFS2F': 6557571,
            'Small1JPEGFine': 236191503,
            'Small1JPEGNormal': 236125967,
            'Small2JPEGFine': 252968719,
            'Small3JPEGFine': 269745935,
            'SmallJPEG': 34668303,
            'SmallJPEGFine': 34864911,
            'SmallJPEGNormal': 34799375,
            'SR': 40173327,
            'SRLJ': 40108048,
            'SRLJF': 40108051,
            'SRLJN': 40108050,
            'SRM1J': 40109328,
            'SRM2J': 40109584,
            'SRMJF': 40108307,
            'SRMJN': 40108306,
            'SRS1JF': 40111635,
            'SRS1JN': 40111634,
            'SRS2JF': 40111891,
            'SRS3JF': 40112147,
            'SRSJ': 40108560,
            'SRSJF': 40108563,
            'SRSJN': 40108562,
            'Unknown': 4294967295,
        };
        ImageQuality.Format = {
            'CR2': 6,
            'CRW': 2,
            'JPEG': 1,
            'RAW': 4,
            'Unknown': 0,
        };
        ImageQuality.Size = {
            'Large': 0,
            'Middle': 1,
            'Middle1': 5,
            'Middle2': 6,
            'Small': 2,
            'Small1': 14,
            'Small2': 15,
            'Small3': 16,
            'Unknown': 4294967295,
        };
        ImageQuality.CompressionQuality = {
            'Fine': 3,
            'Lossless': 4,
            'Normal': 2,
            'SuperFine': 5,
            'Unknown': 4294967295,
        };
        return ImageQuality;
    }());

    var ISOSensitivity = (function () {
        function ISOSensitivity(value_) {
            this.value_ = value_;
            this[_a] = 'ISOSensitivity';
            if (value_ === 0) {
                this.label_ = 'Auto';
                this.sensitivity_ = 0;
            }
            else {
                this.sensitivity_ = ISOSensitivity.Values[value_] || 0;
                this.label_ = this.sensitivity_.toString();
            }
        }
        Object.defineProperty(ISOSensitivity.prototype, "label", {
            get: function () {
                return this.label_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ISOSensitivity.prototype, "value", {
            get: function () {
                return this.value_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ISOSensitivity.prototype, "sensitivity", {
            get: function () {
                return this.sensitivity_;
            },
            enumerable: false,
            configurable: true
        });
        ISOSensitivity.prototype[(_a = Symbol.toStringTag, Symbol.toPrimitive)] = function (hint) {
            switch (hint) {
                case 'number':
                    return this.value_;
                case 'string':
                    return this.label_;
                default:
                    return null;
            }
        };
        ISOSensitivity.prototype.toJSON = function () {
            return {
                label: this.label,
                value: this.value,
                ISOSensitivity: this.sensitivity,
            };
        };
        ISOSensitivity.findNearest = function (valueOrLabel, filter) {
            var sensitivity;
            if (typeof valueOrLabel === 'string') {
                var iso = ISOSensitivity.forLabel(valueOrLabel);
                if (!iso) {
                    return null;
                }
                sensitivity = iso.sensitivity;
            }
            else {
                sensitivity = (new ISOSensitivity(valueOrLabel)).sensitivity;
            }
            var found = Object.keys(ISOSensitivity.Values).reduce(function (carry, key) {
                var current = ISOSensitivity.Values[key];
                var difference = Math.abs(current - sensitivity);
                if (!carry || difference < carry.difference) {
                    if (filter && !filter(new ISOSensitivity(+key))) {
                        return carry;
                    }
                    return {
                        value: +key,
                        difference: difference,
                    };
                }
                return carry;
            }, null);
            if (found) {
                return new ISOSensitivity(found.value);
            }
            return null;
        };
        ISOSensitivity.forLabel = function (label) {
            if (label in ISOSensitivity.ID) {
                return new ISOSensitivity(ISOSensitivity.ID[label]);
            }
            var value = Object
                .keys(ISOSensitivity.Values)
                .find(function (key) { return ISOSensitivity.Values[key] === +label; });
            if (value) {
                return new ISOSensitivity(+value);
            }
            return null;
        };
        var _a;
        ISOSensitivity.ID = {
            'Auto': 0,
        };
        ISOSensitivity.Values = {
            '40': 6,
            '48': 12,
            '56': 25,
            '64': 50,
            '72': 100,
            '75': 125,
            '77': 160,
            '80': 200,
            '83': 250,
            '85': 320,
            '88': 400,
            '91': 500,
            '93': 640,
            '96': 800,
            '99': 1000,
            '101': 1250,
            '104': 1600,
            '107': 2000,
            '109': 2500,
            '112': 3200,
            '115': 4000,
            '117': 5000,
            '120': 6400,
            '123': 8000,
            '125': 10000,
            '128': 12800,
            '131': 16000,
            '133': 20000,
            '136': 25600,
            '139': 32000,
            '141': 40000,
            '144': 51200,
            '147': 64000,
            '149': 80000,
            '152': 102400,
            '160': 204800,
            '168': 409600,
            '176': 819200,
        };
        return ISOSensitivity;
    }());

    var __extends$1 = (window && window.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var ObjectEvent = (function (_super) {
        __extends$1(ObjectEvent, _super);
        function ObjectEvent(identifier) {
            var _this = _super.call(this, identifier, ObjectEvent.ID) || this;
            _this[_a] = 'ObjectEvent';
            return _this;
        }
        ObjectEvent.prototype.equalTo = function (other) {
            return _super.prototype.equalTo.call(this, +other);
        };
        var _a;
        _a = Symbol.toStringTag;
        ObjectEvent.ID = {
            'All': 512,
            'DirItemCancelTransferDT': 522,
            'DirItemContentChanged': 519,
            'DirItemCreated': 516,
            'DirItemInfoChanged': 518,
            'DirItemRemoved': 517,
            'DirItemRequestTransfer': 520,
            'DirItemRequestTransferDT': 521,
            'FolderUpdateItems': 515,
            'VolumeAdded': 524,
            'VolumeInfoChanged': 513,
            'VolumeRemoved': 525,
            'VolumeUpdateItems': 514,
        };
        return ObjectEvent;
    }(ApiIdentifier));

    var Option = (function () {
        function Option(propertyID_, value_) {
            this.propertyID_ = propertyID_;
            this.value_ = value_;
            this[_a] = 'Option';
            this.label_ = "0x".concat(value_.toString(16).padStart(8, '0'));
            var propertyLabel = Object.keys(CameraProperty.ID).find(function (key) { return CameraProperty.ID[key] === propertyID_; });
            if (propertyLabel && propertyLabel in Option) {
                var optionLabels_1 = Option[propertyLabel];
                var optionLabel = Object.keys(optionLabels_1).find(function (key) { return optionLabels_1[key] === value_; });
                if (optionLabel) {
                    this.label_ = propertyLabel + '.' + optionLabel;
                }
            }
        }
        Object.defineProperty(Option.prototype, "label", {
            get: function () {
                return this.label_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Option.prototype, "value", {
            get: function () {
                return this.value_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Option.prototype, "propertyID", {
            get: function () {
                return this.propertyID_;
            },
            enumerable: false,
            configurable: true
        });
        Option.prototype[(_a = Symbol.toStringTag, Symbol.toPrimitive)] = function (hint) {
            switch (hint) {
                case 'number':
                    return this.value_;
                case 'string':
                    return this.label_;
                default:
                    return null;
            }
        };
        Option.forLabel = function (label) {
            var _b = label.split('.', 2), propertyLabel = _b[0], optionLabel = _b[1];
            var propertyID = CameraProperty.ID[propertyLabel] || null;
            if (propertyID &&
                propertyLabel in Option &&
                optionLabel in Option[propertyLabel]) {
                return new Option(propertyID, Option[propertyLabel][optionLabel]);
            }
            return null;
        };
        var _a;
        Option.AEMode = {
            'A_DEP': 5,
            'Av': 2,
            'BackgroundBlur': 62,
            'BacklitScenes': 24,
            'Bulb': 4,
            'CandlelightPortraits': 28,
            'Children': 26,
            'Closeup': 14,
            'CreativeAuto': 19,
            'CreativeFilter': 29,
            'Custom': 7,
            'DEP': 6,
            'Fireworks': 57,
            'Fisheye': 33,
            'FlashOff': 15,
            'Flexible': 55,
            'Food': 27,
            'Green': 9,
            'GroupPhoto': 46,
            'Hdr_Bold': 38,
            'Hdr_Embossed': 39,
            'Hdr_Standard': 36,
            'Hdr_Vivid': 37,
            'Landscape': 13,
            'Lock': 8,
            'Manual': 3,
            'Miniature': 35,
            'Movie': 20,
            'Movie_DirectMono': 43,
            'Movie_Fantasy': 40,
            'Movie_Memory': 42,
            'Movie_Mini': 44,
            'Movie_Old': 41,
            'Myself': 50,
            'NightPortrait': 10,
            'NightScenes': 23,
            'OilPainting': 56,
            'PanningAssist': 45,
            'Panorama': 53,
            'PhotoInMovie': 21,
            'PlusMovieAuto': 51,
            'Portrait': 12,
            'ProgramAE': 0,
            'RoughMonoChrome': 30,
            'SceneIntelligentAuto': 22,
            'SCN': 25,
            'Silent': 54,
            'SmoothSkin': 52,
            'SoftFocus': 31,
            'Sports': 11,
            'StarNightScape': 59,
            'StarPortrait': 58,
            'StarTimelapseMovie': 61,
            'StarTrails': 60,
            'ToyCamera': 32,
            'Tv': 1,
            'Unknown': 4294967295,
            'WaterColor': 34,
        };
        Option.AEModeSelect = {
            'A_DEP': 5,
            'Av': 2,
            'BackgroundBlur': 62,
            'BacklitScenes': 24,
            'Bulb': 4,
            'CandlelightPortraits': 28,
            'Children': 26,
            'Closeup': 14,
            'CreativeAuto': 19,
            'CreativeFilter': 29,
            'Custom': 7,
            'Custom2': 16,
            'Custom3': 17,
            'DEP': 6,
            'Fireworks': 57,
            'Fisheye': 33,
            'FlashOff': 15,
            'Flexible': 55,
            'Food': 27,
            'Green': 9,
            'GroupPhoto': 46,
            'Hdr_Bold': 38,
            'Hdr_Embossed': 39,
            'Hdr_Standard': 36,
            'Hdr_Vivid': 37,
            'Landscape': 13,
            'Lock': 8,
            'Manual': 3,
            'Miniature': 35,
            'Movie': 20,
            'Movie_DirectMono': 43,
            'Movie_Fantasy': 40,
            'Movie_Memory': 42,
            'Movie_Mini': 44,
            'Movie_Old': 41,
            'Myself': 50,
            'NightPortrait': 10,
            'NightScenes': 23,
            'OilPainting': 56,
            'PanningAssist': 45,
            'Panorama': 53,
            'PhotoInMovie': 21,
            'PlusMovieAuto': 51,
            'Portrait': 12,
            'ProgramAE': 0,
            'RoughMonoChrome': 30,
            'SceneIntelligentAuto': 22,
            'SCN': 25,
            'Silent': 54,
            'SmoothSkin': 52,
            'SoftFocus': 31,
            'Sports': 11,
            'StarNightScape': 59,
            'StarPortrait': 58,
            'StarTimelapseMovie': 61,
            'StarTrails': 60,
            'ToyCamera': 32,
            'Tv': 1,
            'Unknown': 4294967295,
            'WaterColor': 34,
        };
        Option.AFMode = {
            'AIFocus': 2,
            'AIServo': 1,
            'ManualFocus': 3,
            'NotValid': 4294967295,
            'OneShot': 0,
        };
        Option.BatteryQuality = {
            'Full': 3,
            'Half': 1,
            'High': 2,
            'Low': 0,
        };
        Option.Bracket = {
            'AEBracket': 1,
            'BracketOff': 4294967295,
            'FEBracket': 8,
            'ISOBracket': 2,
            'WBBracket': 4,
        };
        Option.ColorSpace = {
            'AdobeRGB': 2,
            'sRGB': 1,
            'Unknown': 4294967295,
        };
        Option.DCStrobe = {
            'Auto': 0,
            'Off': 3,
            'On': 1,
            'SlowSynchro': 2,
        };
        Option.DriveMode = {
            'ContinuousShooting': 1,
            'HighSpeedContinuous': 4,
            'LowSpeedContinuous': 5,
            'SelfTimer2sec': 17,
            'SelfTimer10sec': 16,
            'SelfTimerContinuous': 7,
            'SilentContinuousShooting': 20,
            'SilentHSContinuous': 21,
            'SilentLSContinuous': 22,
            'SilentSingleShooting': 19,
            'SingleShooting': 0,
            'SingleSilentShooting': 6,
            'SuperHighSpeed14fps': 18,
            'Video': 2,
        };
        Option.EvfAFMode = {
            'ExpandAFAreaAround': 6,
            'ExpandAFAreaCross': 5,
            'FaceTracking': 2,
            'FlexiZoneMulti': 3,
            'LargeZoneAFHorizontal': 7,
            'LargeZoneAFVertical': 8,
            'OnePointAF': 1,
            'Quick': 0,
            'SpotAF': 10,
            'TrackingAF': 9,
            'ZoneAF': 4,
        };
        Option.EvfHistogramStatus = {
            'Grayout': 2,
            'Hide': 0,
            'Normal': 1,
        };
        Option.EvfOutputDevice = {
            'None': 0,
            'PC': 2,
            'TFT': 1,
        };
        Option.EvfZoom = {
            'Fit': 1,
            'x5': 5,
            'x10': 10,
        };
        Option.LensBarrelStatus = {
            'Inner': 0,
            'Outer': 1,
        };
        Option.LensStatus = {
            'Attached': 1,
            'NotAttached': 0,
        };
        Option.MeteringMode = {
            'CenterWeightedAverage': 5,
            'Evaluative': 3,
            'NotValid': 4294967295,
            'Partial': 4,
            'Spot': 1,
        };
        Option.MirrorUpStatus = {
            'Disable': 0,
            'DuringShooting': 2,
            'Enable': 1,
        };
        Option.MovieQuality = {
            '23.98fps (RAW)': 668272,
            '24.00fps (RAW)': 668528,
            '25.00fps (RAW)': 668784,
            '29.97fps (RAW)': 669040,
            '50.00fps (RAW)': 669296,
            '59.94fps (RAW)': 669552,
            '640x480 25.00fps': 132096,
            '640x480 29.97ffps': 132352,
            '1280x720 25.00fps Standard(IPB)': 70704,
            '1280x720 29.97fps Light(IPB)': 70961,
            '1280x720 29.97fps Standard(IPB)': 70960,
            '1280x720 50.00fps': 67072,
            '1280x720 50.00fps For editing(ALL-I)': 71184,
            '1280x720 50.00fps Standard(IPB)': 71216,
            '1280x720 59.94fps': 67328,
            '1280x720 59.94fps For editing(ALL-I)': 71440,
            '1280x720 59.94fps Standard(IPB)': 71472,
            '1280x720 100.0fps For editing(ALL-I)': 71696,
            '1280x720 100.0fps Standard(IPB)': 71728,
            '1280x720 119.9fps For editing(ALL-I)': 71952,
            '1280x720 119.9fps Standard(IPB)': 71984,
            '1920x1080 23.98fps': 512,
            '1920x1080 23.98fps For editing(ALL-I)': 4624,
            '1920x1080 23.98fps For editing(ALL-I)Crop': 134222352,
            '1920x1080 23.98fps Standard(IPB)': 4656,
            '1920x1080 23.98fps Standard(IPB)Crop': 134222384,
            '1920x1080 24.00fps For editing(ALL-I)': 4880,
            '1920x1080 24.00fps For editing(ALL-I)Crop': 134222864,
            '1920x1080 24.00fps Standard(IPB)': 4912,
            '1920x1080 24.00fps Standard(IPB)Crop': 134222896,
            '1920x1080 25.00fps': 1024,
            '1920x1080 25.00fps For editing(ALL-I)': 5136,
            '1920x1080 25.00fps For editing(ALL-I)Crop': 134222897,
            '1920x1080 25.00fps Light(IPB)': 5169,
            '1920x1080 25.00fps Standard(IPB)': 5168,
            '1920x1080 25.00fps Standard(IPB)Crop': 134223120,
            '1920x1080 29.94fps Standard(IPB)Crop': 134223153,
            '1920x1080 29.97fps': 1280,
            '1920x1080 29.97fps For editing(ALL-I)': 1296,
            '1920x1080 29.97fps For editing(ALL-I)Crop': 134223152,
            '1920x1080 29.97fps Light(IPB)': 5425,
            '1920x1080 29.97fps Standard(IPB)': 5424,
            '1920x1080 50.00fps For editing(ALL-I)': 5648,
            '1920x1080 50.00fps For editing(ALL-I)Crop': 134223376,
            '1920x1080 50.00fps Standard(IPB)': 5680,
            '1920x1080 50.00fps Standard(IPB)Crop': 134223408,
            '1920x1080 59.94fps For editing(ALL-I)': 5904,
            '1920x1080 59.94fps For editing(ALL-I)Crop': 134223632,
            '1920x1080 59.94fps Standard(IPB)': 5936,
            '1920x1080 59.94fps Standard(IPB)Crop': 134223664,
            '1920x1080 100.0fps For editing(ALL-I)': 6160,
            '1920x1080 119.9fps For editing(ALL-I)': 6416,
            '3840x2160 23.98fps For editing(ALL-I)': 134550032,
            '3840x2160 23.98fps Standard(IPB)': 134550064,
            '3840x2160 24.00fps For editing(ALL-I)': 332560,
            '3840x2160 24.00fps Standard(IPB)': 332592,
            '3840x2160 25.00fps For editing(ALL-I)': 134550544,
            '3840x2160 25.00fps Standard(IPB)': 134550576,
            '3840x2160 29.97fps For editing(ALL-I)': 134550800,
            '3840x2160 29.97fps Standard(IPB)': 134550832,
            '3840x2160 50.00fps For editing(ALL-I)': 134551056,
            '3840x2160 50.00fps Standard(IPB)': 134551088,
            '3840x2160 59.94fps For editing(ALL-I)': 134551312,
            '3840x2160 59.94fps Standard(IPB)': 134551344,
            '3840x2160 100.0fps For editing(ALL-I)': 333840,
            '3840x2160 119.9fps For editing(ALL-I)': 334096,
            '4096x2160 23.98fps For editing(ALL-I)': 201232,
            '4096x2160 23.98fps For editing(ALL-I) Crop': 134418960,
            '4096x2160 23.98fps Motion JPEG': 197184,
            '4096x2160 23.98fps Standard(IPB)': 201264,
            '4096x2160 23.98fps Standard(IPB)Crop': 134418992,
            '4096x2160 24.00fps For editing(ALL-I)': 201488,
            '4096x2160 24.00fps For editing(ALL-I)Crop': 134419216,
            '4096x2160 24.00fps Motion JPEG': 197440,
            '4096x2160 24.00fps Standard(IPB)': 201520,
            '4096x2160 24.00fps Standard(IPB)Crop': 134419248,
            '4096x2160 25.00fps For editing(ALL-I)': 201744,
            '4096x2160 25.00fps For editing(ALL-I)Crop': 134419472,
            '4096x2160 25.00fps Motion JPEG': 197696,
            '4096x2160 25.00fps Standard(IPB)': 201776,
            '4096x2160 25.00fps Standard(IPB)Crop': 134419504,
            '4096x2160 29.94fps Standard(IPB)Crop': 134419760,
            '4096x2160 29.97fps For editing(ALL-I)': 202000,
            '4096x2160 29.97fps For editing(ALL-I)Crop': 134419728,
            '4096x2160 29.97fps Motion JPEG': 197952,
            '4096x2160 29.970fps Standard(IPB)': 202032,
            '4096x2160 50.00fps For editing(ALL-I)': 202256,
            '4096x2160 50.00fps For editing(ALL-I)Crop': 134419984,
            '4096x2160 50.00fps Standard(IPB)': 202288,
            '4096x2160 50.00fps Standard(IPB)Crop': 134420016,
            '4096x2160 59.94fps For editing(ALL-I)': 202512,
            '4096x2160 59.94fps For editing(ALL-I)Crop': 134420240,
            '4096x2160 59.94fps Standard(IPB)': 202544,
            '4096x2160 59.94fps Standard(IPB)Crop': 134420272,
            '4096x2160 100.0fps For editing(ALL-I)': 202768,
            '4096x2160 119.9fps For editing(ALL-I)': 203024,
            '7680x4320 23.98fps For editing(ALL-I)': 594448,
            '7680x4320 23.98fps Standard(IPB)': 594480,
            '7680x4320 25.00fps For editing(ALL-I)': 594960,
            '7680x4320 25.00fps Standard(IPB)': 594992,
            '7680x4320 29.97fps For editing(ALL-I)': 595216,
            '7680x4320 29.97fps Standard(IPB)': 595248,
            '8192x4320 23.98fps For editing(ALL-I)': 528912,
            '8192x4320 23.98fps Standard(IPB)': 528944,
            '8192x4320 24.00fps For editing(ALL-I)': 529168,
            '8192x4320 24.00fps Standard(IPB)': 529200,
            '8192x4320 25.00fps For editing(ALL-I)': 529424,
            '8192x4320 25.00fps Standard(IPB)': 529456,
            '8192x4320 29.97fps For editing(ALL-I)': 529680,
            '8192x4320 29.97fps Standard(IPB)': 529712,
        };
        Option.NoiseReduction = {
            'Auto': 4,
            'Off': 0,
            'On1': 1,
            'On2': 2,
            'On3': 3,
        };
        Option.RedEye = {
            'Invalid': 4294967295,
            'Off': 0,
            'On': 1,
        };
        Option.Record = {
            'Begin': 4,
            'End': 0,
        };
        Option.SaveTo = {
            'Both': 3,
            'Camera': 1,
            'Host': 2,
        };
        Option.WhiteBalance = {
            'AutoAmbiencePriority': 0,
            'AutoWhitePriority': 23,
            'Click': 4294967295,
            'Cloudy': 2,
            'ColorTemperature': 9,
            'CustomPC1': 10,
            'CustomPC2': 11,
            'CustomPC3': 12,
            'CustomPC4': 20,
            'CustomPC5': 21,
            'Daylight': 1,
            'Flash': 5,
            'Fluorescent': 4,
            'Pasted': 4294967294,
            'Shade': 8,
            'Tungsten': 3,
            'WhitePaper': 6,
            'WhitePaper2': 15,
            'WhitePaper3': 16,
            'WhitePaper4': 18,
            'WhitePaper5': 19,
        };
        return Option;
    }());

    var OutputDevice = (function () {
        function OutputDevice(value) {
            this[_a] = 'OutputDevice';
            this.label_ = '';
            this.value_ = value;
            var deviceNames = [];
            for (var _i = 0, _b = Object.keys(OutputDevice.ID); _i < _b.length; _i++) {
                var deviceName = _b[_i];
                if (OutputDevice.ID[deviceName] > 0 &&
                    this.isEnabled(OutputDevice.ID[deviceName])) {
                    deviceNames.push(deviceName);
                }
            }
            this.label_ = deviceNames.join(', ');
        }
        Object.defineProperty(OutputDevice.prototype, "label", {
            get: function () {
                return (this.label_) ? this.label_ : 'None';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OutputDevice.prototype, "value", {
            get: function () {
                return this.value_;
            },
            enumerable: false,
            configurable: true
        });
        OutputDevice.prototype[(_a = Symbol.toStringTag, Symbol.toPrimitive)] = function (hint) {
            switch (hint) {
                case 'number':
                    return this.value_;
                case 'string':
                    return this.label_;
                default:
                    return null;
            }
        };
        OutputDevice.prototype.isEnabled = function (deviceID) {
            return (deviceID > 0 && (this.value_ & deviceID) === deviceID);
        };
        OutputDevice.prototype.getDevices = function () {
            var devices = {};
            for (var _i = 0, _b = Object.keys(OutputDevice.ID); _i < _b.length; _i++) {
                var deviceName = _b[_i];
                if (OutputDevice.ID[deviceName] > 0) {
                    devices[deviceName] = this.isEnabled(OutputDevice.ID[deviceName]);
                }
            }
            return devices;
        };
        OutputDevice.prototype.toJSON = function () {
            return {
                label: this.label,
                value: this.value,
                devices: this.getDevices(),
            };
        };
        OutputDevice.forLabel = function (label) {
            var deviceNames = label.match(/[\w\d]+/g) || [];
            var value = OutputDevice.ID.None;
            for (var _i = 0, deviceNames_1 = deviceNames; _i < deviceNames_1.length; _i++) {
                var deviceName = deviceNames_1[_i];
                if (deviceName in OutputDevice.ID) {
                    value |= OutputDevice.ID[deviceName];
                }
            }
            return new OutputDevice(value);
        };
        var _a;
        OutputDevice.ID = {
            'None': 0,
            'PC': 2,
            'TFT': 1,
        };
        return OutputDevice;
    }());

    var ShutterSpeed = (function () {
        function ShutterSpeed(value_) {
            this.value_ = value_;
            this[_a] = 'ShutterSpeed';
            var name = Object
                .keys(ShutterSpeed.ID)
                .find(function (key) { return ShutterSpeed.ID[key] === value_; });
            if (name) {
                this.label_ = name;
                this.seconds_ = 0;
            }
            else if ("".concat(value_) in ShutterSpeed.OneThirdValues) {
                this.seconds_ = ShutterSpeed.OneThirdValues[value_] || 0;
                this.label_ = ShutterSpeed.getLabelForSeconds(this.seconds_) + ' (1/3)';
            }
            else {
                this.seconds_ = ShutterSpeed.OneHalfValues[value_] || 0;
                this.label_ = ShutterSpeed.getLabelForSeconds(this.seconds_);
            }
        }
        ShutterSpeed.getLabelForSeconds = function (seconds) {
            var label = '';
            if (seconds > 0.2999) {
                label = seconds.toFixed(1).replace(/\.0+$/, '');
            }
            else if (seconds > 0.0) {
                label = "1/".concat(Math.round(1.0 / seconds));
            }
            return label;
        };
        Object.defineProperty(ShutterSpeed.prototype, "label", {
            get: function () {
                return this.label_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ShutterSpeed.prototype, "value", {
            get: function () {
                return this.value_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ShutterSpeed.prototype, "seconds", {
            get: function () {
                return this.seconds_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ShutterSpeed.prototype, "stop", {
            get: function () {
                return ("".concat(this.value_) in ShutterSpeed.OneThirdValues) ? '1/3' : '1/2';
            },
            enumerable: false,
            configurable: true
        });
        ShutterSpeed.prototype[(_a = Symbol.toStringTag, Symbol.toPrimitive)] = function (hint) {
            switch (hint) {
                case 'number':
                    return this.value_;
                case 'string':
                    return this.label_;
                default:
                    return null;
            }
        };
        ShutterSpeed.prototype.toJSON = function () {
            return {
                label: this.label,
                value: this.value,
                seconds: this.seconds,
                stop: this.stop,
            };
        };
        ShutterSpeed.findNearest = function (valueOrLabel, filter) {
            var seconds = 0;
            if (typeof valueOrLabel === 'string') {
                var speed = ShutterSpeed.forLabel(valueOrLabel);
                if (!speed) {
                    return null;
                }
                seconds = speed.seconds;
            }
            else {
                seconds = (new ShutterSpeed(valueOrLabel)).seconds;
            }
            var found = Object.keys(ShutterSpeed.AllValues).reduce(function (carry, key) {
                var current = ShutterSpeed.AllValues[key];
                var difference = Math.abs(current - seconds);
                if (!carry || difference < carry.difference) {
                    if (filter && !filter(new ShutterSpeed(+key))) {
                        return carry;
                    }
                    return {
                        value: +key,
                        difference: difference,
                    };
                }
                return carry;
            }, null);
            if (found) {
                return new ShutterSpeed(found.value);
            }
            return null;
        };
        ShutterSpeed.forLabel = function (label) {
            if (label in ShutterSpeed.ID) {
                return new ShutterSpeed(ShutterSpeed.ID[label]);
            }
            var match = label.match(/(\d+(?:\.\d+)?)(?:\s*\/\s*(\d+))?(?:\s+(.*))?/);
            if (match) {
                var isOneThird = (match[3] || '').indexOf('1/3') >= 0;
                var seconds_1 = parseFloat(match[1]) || 0.0;
                if (match[2]) {
                    seconds_1 /= parseFloat(match[2]);
                }
                var values_1 = isOneThird ? ShutterSpeed.OneThirdValues : ShutterSpeed.OneHalfValues;
                var value = Object.keys(values_1).find(function (straw) { return Math.abs(values_1[straw] - seconds_1) < 0.0000001; });
                return new ShutterSpeed(+(value || -1));
            }
            return null;
        };
        var _a;
        ShutterSpeed.ID = {
            'Auto': 0,
            'Bulb': 12,
            'NotValid': 4294967295,
        };
        ShutterSpeed.OneHalfValues = {
            '16': 30,
            '19': 25,
            '20': 20,
            '24': 15,
            '27': 13,
            '28': 10,
            '32': 8,
            '36': 6,
            '37': 5,
            '40': 4,
            '43': 3.2,
            '44': 3,
            '45': 2.5,
            '48': 2,
            '51': 1.6,
            '52': 1.5,
            '53': 1.3,
            '56': 1,
            '59': 0.8,
            '60': 0.7,
            '61': 0.6,
            '64': 0.5,
            '67': 0.4,
            '68': 0.3,
            '72': 0.25,
            '75': 0.2,
            '76': 0.16666666666666666,
            '80': 0.125,
            '84': 0.1,
            '85': 0.07692307692307693,
            '88': 0.06666666666666667,
            '92': 0.05,
            '93': 0.04,
            '96': 0.03333333333333333,
            '99': 0.025,
            '100': 0.022222222222222223,
            '101': 0.02,
            '104': 0.016666666666666666,
            '107': 0.0125,
            '108': 0.011111111111111112,
            '109': 0.01,
            '112': 0.008,
            '115': 0.00625,
            '116': 0.005555555555555556,
            '117': 0.005,
            '120': 0.004,
            '123': 0.003125,
            '124': 0.002857142857142857,
            '125': 0.0025,
            '128': 0.002,
            '131': 0.0015625,
            '132': 0.0013333333333333333,
            '133': 0.00125,
            '136': 0.001,
            '139': 0.0008,
            '140': 0.0006666666666666666,
            '141': 0.000625,
            '144': 0.0005,
            '147': 0.0004,
            '148': 0.0003333333333333333,
            '149': 0.0003125,
            '152': 0.00025,
            '155': 0.0002,
            '156': 0.00016666666666666666,
            '157': 0.00015625,
            '160': 0.000125,
        };
        ShutterSpeed.OneThirdValues = {
            '21': 20,
            '29': 10,
            '35': 6,
            '69': 0.3,
            '77': 0.16666666666666666,
            '83': 0.1,
            '91': 0.05,
        };
        ShutterSpeed.AllValues = {
            '16': 30,
            '19': 25,
            '20': 20,
            '21': 20,
            '24': 15,
            '27': 13,
            '28': 10,
            '29': 10,
            '32': 8,
            '35': 6,
            '36': 6,
            '37': 5,
            '40': 4,
            '43': 3.2,
            '44': 3,
            '45': 2.5,
            '48': 2,
            '51': 1.6,
            '52': 1.5,
            '53': 1.3,
            '56': 1,
            '59': 0.8,
            '60': 0.7,
            '61': 0.6,
            '64': 0.5,
            '67': 0.4,
            '68': 0.3,
            '69': 0.3,
            '72': 0.25,
            '75': 0.2,
            '76': 0.16666666666666666,
            '77': 0.16666666666666666,
            '80': 0.125,
            '83': 0.1,
            '84': 0.1,
            '85': 0.07692307692307693,
            '88': 0.06666666666666667,
            '91': 0.05,
            '92': 0.05,
            '93': 0.04,
            '96': 0.03333333333333333,
            '99': 0.025,
            '100': 0.022222222222222223,
            '101': 0.02,
            '104': 0.016666666666666666,
            '107': 0.0125,
            '108': 0.011111111111111112,
            '109': 0.01,
            '112': 0.008,
            '115': 0.00625,
            '116': 0.005555555555555556,
            '117': 0.005,
            '120': 0.004,
            '123': 0.003125,
            '124': 0.002857142857142857,
            '125': 0.0025,
            '128': 0.002,
            '131': 0.0015625,
            '132': 0.0013333333333333333,
            '133': 0.00125,
            '136': 0.001,
            '139': 0.0008,
            '140': 0.0006666666666666666,
            '141': 0.000625,
            '144': 0.0005,
            '147': 0.0004,
            '148': 0.0003333333333333333,
            '149': 0.0003125,
            '152': 0.00025,
            '155': 0.0002,
            '156': 0.00016666666666666666,
            '157': 0.00015625,
            '160': 0.000125,
        };
        return ShutterSpeed;
    }());

    var __extends = (window && window.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var StateEvent = (function (_super) {
        __extends(StateEvent, _super);
        function StateEvent(identifier) {
            var _this = _super.call(this, identifier, StateEvent.ID) || this;
            _this[_a] = 'StateEvent';
            return _this;
        }
        StateEvent.prototype.equalTo = function (other) {
            return _super.prototype.equalTo.call(this, +other);
        };
        var _a;
        _a = Symbol.toStringTag;
        StateEvent.ID = {
            'AfResult': 777,
            'All': 768,
            'BulbExposureTime': 784,
            'CaptureError': 773,
            'InternalError': 774,
            'JobStatusChanged': 770,
            'PowerZoomInfoChanged': 785,
            'Shutdown': 769,
            'ShutDownTimerUpdate': 772,
            'WillSoonShutDown': 771,
        };
        return StateEvent;
    }(ApiIdentifier));

    var TimeZone = (function () {
        function TimeZone(value_) {
            this.value_ = value_;
            this[_a] = 'TimeZone';
            this.difference_ = 0;
            this.value_ = value_;
            this.zone_ = value_;
            this.label_ = TimeZone.Zones["".concat(value_)] || '';
        }
        Object.defineProperty(TimeZone.prototype, "label", {
            get: function () {
                return this.label_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TimeZone.prototype, "value", {
            get: function () {
                return this.value_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TimeZone.prototype, "zone", {
            get: function () {
                return this.zone_;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TimeZone.prototype, "difference", {
            get: function () {
                return this.difference_;
            },
            enumerable: false,
            configurable: true
        });
        TimeZone.prototype[(_a = Symbol.toStringTag, Symbol.toPrimitive)] = function (hint) {
            switch (hint) {
                case 'number':
                    return this.value_;
                case 'string':
                    return this.label_;
                default:
                    return null;
            }
        };
        TimeZone.prototype.toJSON = function () {
            return {
                label: this.label,
                value: this.value,
                zone: this.zone,
                difference: this.difference,
            };
        };
        var _a;
        TimeZone.Zones = {
            '0': 'None',
            '1': 'Chatham Islands',
            '2': 'Wellington',
            '3': 'Solomon Island',
            '4': 'Sydney',
            '5': 'Adeladie',
            '6': 'Tokyo',
            '7': 'Hong Kong',
            '8': 'Bangkok',
            '9': 'Yangon',
            '10': 'Dacca',
            '11': 'Kathmandu',
            '12': 'Delhi',
            '13': 'Karachi',
            '14': 'Kabul',
            '15': 'Dubai',
            '16': 'Tehran',
            '17': 'Moscow',
            '18': 'Cairo',
            '19': 'Paris',
            '20': 'London',
            '21': 'Azores',
            '22': 'Fernando de Noronha',
            '23': 'São Paulo',
            '24': 'Newfoundland',
            '25': 'Santiago',
            '26': 'Caracas',
            '27': 'New York',
            '28': 'Chicago',
            '29': 'Denver',
            '30': 'Los Angeles',
            '31': 'Anchorage',
            '32': 'Honolulu',
            '33': 'Samoa',
            '34': 'Riyadh',
            '35': 'Manaus',
            '256': 'UTC',
            '65535': 'UTC',
        };
        return TimeZone;
    }());

    var Volume = (function () {
        function Volume() {
            this[_a] = 'Volume';
            throw new Error('Not implemented - stub only.');
        }
        Object.defineProperty(Volume.prototype, "label", {
            get: function () {
                throw new Error('Not implemented - stub only.');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Volume.prototype, "storageType", {
            get: function () {
                throw new Error('Not implemented - stub only.');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Volume.prototype, "isReadable", {
            get: function () {
                throw new Error('Not implemented - stub only.');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Volume.prototype, "isWritable", {
            get: function () {
                throw new Error('Not implemented - stub only.');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Volume.prototype, "freeCapacity", {
            get: function () {
                throw new Error('Not implemented - stub only.');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Volume.prototype, "maximumCapacity", {
            get: function () {
                throw new Error('Not implemented - stub only.');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Volume.prototype, "length", {
            get: function () {
                throw new Error('Not implemented - stub only.');
            },
            enumerable: false,
            configurable: true
        });
        Volume.prototype.getEntries = function () {
            throw new Error('Not implemented - stub only.');
        };
        Volume.prototype[(_a = Symbol.toStringTag, Symbol.iterator)] = function () {
            throw new Error('Not implemented - stub only.');
        };
        var _a;
        Volume.StorageType = {
            'CFast': 5,
            'CompactFlash': 1,
            'HardDrive': 4,
            'NoMemoryCard': 0,
            'SDCard': 2,
        };
        return Volume;
    }());

    var watchCameras = function (timeout) {
        throw new Error('Not implemented - stub only.');
    };
    var cameraBrowser = new CameraBrowser();

    exports.Aperture = Aperture;
    exports.ApiError = ApiError;
    exports.Camera = Camera;
    exports.CameraBrowser = CameraBrowser;
    exports.CameraFile = CameraFile;
    exports.CameraProperty = CameraProperty;
    exports.Directory = Directory;
    exports.ExposureCompensation = ExposureCompensation;
    exports.FileFormat = FileFormat;
    exports.Flag = Flag;
    exports.ISOSensitivity = ISOSensitivity;
    exports.ImageQuality = ImageQuality;
    exports.ObjectEvent = ObjectEvent;
    exports.Option = Option;
    exports.OutputDevice = OutputDevice;
    exports.ShutterSpeed = ShutterSpeed;
    exports.StateEvent = StateEvent;
    exports.TimeZone = TimeZone;
    exports.Volume = Volume;
    exports.cameraBrowser = cameraBrowser;
    exports.watchCameras = watchCameras;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
